=========================================
How to use the ``2-matrix_divided`` modul
=========================================

This modul defines the function ``matrix_divided(matrix, div)``

Usage: matrix_divided(matrix, div)
===================================

# The function matrix_divided(matrix, div) defines all elements of a matix.
# matrix must be a list of lists of integers or floats, otherwise raise a
TypeError exception with the message "matrix must be a matrix (list of lists)
of integers/floats".
# Each row of the matrix must be of the same size, otherwise raise a
TypeError exception with the message "Each row of the matrix must have the
same size"
# div must be a number (integer or float), otherwise raise a TypeError
exception with the message "div must be a number".
div canâ€™t be equal to 0, otherwise raise a ZeroDivisionError exception with
the message "division by zero"
# All elements of the matrix should be divided by div, rounded to 2 decimal
places
# Returns a new matrix

Examples with successfull tests
================================

First import modul:
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Divids matrix with div:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

Divide with negative numbers:
	>>> matrix_divided([[1, 3, 2], [4, 5, 6]], -1)
	[[-1.0, -3.0, -2.0], [-4.0, -5.0, -6.0]]

Raises TypeError when non matrix is passed:
	>>> matrix_divided([3,4,6], 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Raises Type error when div is not int | float:
	>>> matrix_divided([[1, "a", 3], [4, 5, 6]], 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Raises type error if each row of the matrix is not the same size:
	>>> matrix_divided([[1, 7, 3], [4, 5, 6, 6]], 2)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

Raises TypeError if div is not a number or float:
	>>> matrix_divided([[1, 7, 3, 2], [4, 5, 6]], "b")
	Traceback (most recent call last):
	TypeError: div must be a number

Raises ZeroDivisionError if div is zero:
	>>> matrix_divided([[1, 7, 3, 2], [4, 5, 6]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

Raise TypeError if div is not passed:
>>> matrix_divided([[1, 3, 2], [4, 5, 6]])
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

Raises TypeError if no value is passed:
>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Raises TypeError if matrix is not list of lists:
	>>> matrix_divided(9, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Raise TypeError if matrix is a list of tuples
	>>> matrix_divided([(3, 8), (15, 3)], 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Raises TypeError if matrix is a string:
	>>> matrix_divided("a", 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Division of matrix with float:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 5.3)
	[[0.19, 0.38, 0.57], [0.75, 0.94, 1.13]]

Divion of tuple will raise TypeError:
	>>> matrix_divided((), 9)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Division of empty list with empty list will create empty list:
	>>> matrix_divided([], [])
	Traceback (most recent call last):
	TypeError: div must be a number

Division of empty list will output empty list:
	>>> matrix_divided([], 5)
	[]
