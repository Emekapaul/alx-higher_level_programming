======================================
How to use the ``3-say_my_name`` modul
======================================

This modul defines the function ``say_my_name(first_name, last_name=""):``

Usage: say_my_name(first_name, last_name=""):
==============================================

# This function prints My name is <first name> <last name>
# first_name and last_name must be strings 
# If first_name is not string raise TypeError with the message
"first_name must be a string"
# If first_name is not string raise TypeError with the message
"last_name must be a string"

Examples of successful tests:
==============================

First import modul
	>>> say_my_name = __import__('3-say_my_name').say_my_name

Prints names that are strings
	>>> say_my_name("John", "Smith")
	My name is John Smith

Passing one argument:
	>>> say_my_name("John")
	My name is John 

Raises TypeError arguments are empty:	
	>>> say_my_name()
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Raises TypeError second argument is not string:
	>>> say_my_name("John", 6)
	Traceback (most recent call last):
	TypeError: last_name must be a string

Raises TypeError if first argument is not string:

	>>> say_my_name(6, "John")
	Traceback (most recent call last):
	TypeError: first_name must be a string

Raises TypeError if list is passed as first argument:
	>>> say_my_name([], "Smith")
	Traceback (most recent call last):
	TypeError: first_name must be a string

Raises TypeError if list is passed as second argument:
	>>> say_my_name("Smith", [])
	Traceback (most recent call last):
	TypeError: last_name must be a string

