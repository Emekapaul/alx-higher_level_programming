=======================================
How to use the ``4-print_square`` modul
=======================================

This modul defines the function ``def print_square(size):``

Usage: def print_square(size)
==============================
# function that prints a square with the character "#".
# size is the size length of the square.
# size must be an integer.
# If not int raise TypeError with the message "size must be an integer"
# If size < 0 raise ValueError with the message "size must be >= 0"
# if size is a float and is less than 0, raise a TypeError exception with
the message size must be an integer

Examples of successful tests:
=============================

First import the modul
	>>> print_square = __import__('4-print_square').print_square

prints square
	>>> print_square(4)
	####
	####
	####
	####

prints 0 square
	>>> print_square(0)

prints 1 square
	>>> print_square(1)
	#

Raises ValueError if negative int is passed:
	>>> print_square(-2)
	Traceback (most recent call last):
	ValueError: size must be >= 0

Raises TypeError if string is passed:
	>>> print_square("a")
	Traceback (most recent call last):
	TypeError: size must be an integer

Raises TypeError if a float is passed:
	>>> print_square(4.2)
	Traceback (most recent call last):
	TypeError: size must be an integer

Raises TypeError if a negative float is passed:
	>>> print_square(-4.2)
	Traceback (most recent call last):
	TypeError: size must be an integer

Raises TypeError if an empty list is passed:
	>>> print_square([])
	Traceback (most recent call last):
	TypeError: size must be an integer

Raises TypeError if a list is passed:
	>>> print_square([4])
	Traceback (most recent call last):
	TypeError: size must be an integer


Raises TypeError if the argument is empty:
	>>> print_square()
	Traceback (most recent call last):
	TypeError: print_square() missing 1 required positional argument: 'size'
